#!/usr/bin/python
#
# This file is part of the LyricZilla project.
# http://lyriczilla.googlecode.com/
#
# Copyright (c) 2007 Liu Qishuai
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#

import gobject
import os
import sys
import dbus
import dbus.service
import dbus.mainloop.glib
import time
import lz_core
import urllib2
import cPickle
import md5

class LyricZilla(dbus.service.Object):


	@dbus.service.method("com.googlecode.lyriczilla.LyricZilla",
		in_signature='sss', out_signature='aa{ss}', async_callbacks=('_succ','_fail'))
		
	def GetLyricList(self, filename, title, artist, _succ, _fail):
		
		# check local files.
		home_dir = os.environ['HOME']
		
		cache_filename = home_dir + '/' + md5.md5(filename).hexdigest() + '.list'
		
		l = []
		try:
			l = (list) (cPickle.load(open(cache_filename)))
			_succ(l)
		except:
			try:
				l = lz_core.get_lyric_list(title, artist)
				_succ(l)
				
				try:
					cPickle.dump(l, open(cache_filename, 'w'))
				except:
					pass
			except:
				_fail(1)
				
	@dbus.service.method("com.googlecode.lyriczilla.LyricZilla",
		in_signature='sb', out_signature='a(is)', async_callbacks=('_succ','_fail'))
			
	def GetLyric(self, url, force_load, _succ, _fail):
	
		# check local files.
		home_dir = os.environ['HOME']
		
		cache_filename = home_dir + '/' + md5.md5(url).hexdigest() + '.lyric'
		print cache_filename

		l = []
		try:
			l = (list) (cPickle.load(open(cache_filename)))
			_succ(l)
		except:
			try:
				l = lz_core.get_lyric(url)
				_succ(l)
				
				try:
					cPickle.dump(l, open(cache_filename, 'w'))
				except:
					pass
			except:
				_fail(1)

	@dbus.service.method("com.googlecode.lyriczilla.LyricZilla",
		in_signature='', out_signature='a{ss}')
	def GetCurrentPlaying(self):
		'''Get the information of currently playing song. Should not be called inside a plugin of a player'''
		return {'status': 'playing', 'title': 'xx', 'artist': 'xx', 'filename': '/home/lqs/test.ogg', 'time': '1000'}


if __name__ == '__main__':
	dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
	
	session_bus = dbus.SessionBus()
	
	name = dbus.service.BusName("com.googlecode.lyriczilla", session_bus)
	object = LyricZilla(session_bus, '/LyricZilla')

	mainloop = gobject.MainLoop()
	print u"Running LyricZilla service."
	mainloop.run()


